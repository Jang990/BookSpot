import java.text.SimpleDateFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.bookspot'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.hibernate:hibernate-spatial:6.4.0.Final'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// jwt
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test:6.1.5'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// 구글 토큰 검증
	implementation 'com.google.api-client:google-api-client:1.32.1'
	implementation 'com.google.oauth-client:google-oauth-client:1.32.1'
	implementation 'com.google.http-client:google-http-client-jackson2:1.40.1'

	// OpenSearch
	implementation("org.opensearch.client:opensearch-rest-client:2.11.0")
	implementation("org.opensearch.client:opensearch-java:2.11.0")
	implementation("jakarta.json:jakarta.json-api")

	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory.set(querydslDir)
}

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

clean.doLast {
	file(querydslDir).deleteDir()
}

// 1. 현재 시간을 yyyyMMdd-HHmmss 형식의 문자열로 생성
def buildTime = new Date()
def formattedTime = new SimpleDateFormat("yyyyMMdd-HHmmss").format(buildTime)

// 2. bootJar 태스크의 결과물 파일명을 변경
bootJar {
	archiveFileName = "${rootProject.name}-${version}-${formattedTime}.jar"
}